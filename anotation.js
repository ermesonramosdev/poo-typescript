/*
    ! POO com TypeSript - Programa√ß√£o orientada a objetos

    * 4 pilares do POO
        ? 1. Abstra√ß√£o: 
            -> Transforma o nosso problema do mundo real mais pr√≥ximo possivel para √°nalise e desenvolvimento na program√ß√£o.

        ? 2. Encapsulamento:
            -> Conforme o pr√≥prio nome sugere, a proposta √© isolar o m√°ximo poss√≠vel as nossas classes, de forma a esconder detalhes de funcionamento interno.

            ->Visa aumentar a flexibilidade, melhorar a manunte√ß√£o e aumentar a extensibilidade do software.

            ? 1.1. Modificadores de acesso.
                -> Modificadores de acessos nos permitem configurar a visibilidade dos nossos atributos, classes e m√©todos.


        ? 3. Heran√ßa:
            -> Heran√ßa √© o conceito que permite uma classe "filha" herdar os atributos e m√©todos de uma classe "pai".

        ? 4. Polimorfismo:
            -> Em POO, √© a capacidade de um m√©todo se comportar de maneiras diferentes dependendo do contexto, geralmente usando heran√ßa.

    * Estrutura
        ? 1. Classe:
            -> Abstra√ß√£o do que h√° em comum(em termos de caracter√≠sticas e comportamentos) a um conjunto de objetos.
            ? 1.1. Atributos:
                -> Caracter√≠sticas.
            ? 2.1. M√©todos:
                -> Comportamentos.

        ? 2. Objeto:
            -> Combina a estrutura de dados(atributos) e o comportamento dos dados(opera√ß√µes/m√©todos) em uma √∫nica entidade.

            -> Um objeto pode ser definido como um conceito, uma abstra√ß√£o, algo com limites n√≠tidos e significado em rela√ß√£o ao mundo.

            -> Onjetos servem como uma base real para a elabora√ß√£o de um sistema consistente com uma realidade modelada.

        ? 3. Classe e Objetos
            1. Classe √© o que projetamos.

            2. Objeto √© o que criamos a partir da classe.

            3. As classes est√£o para os objetos assim como as plantas arquitet√¥nicas est√£o para as casas.

        ? 4. Modificadores de acesso.

            * M√©todos privados.

                ? 1. PUBLIC (+)
                    -> Acess√≠vel de qualquer lugar: dentro ou fora da classe.
                    -> Padr√£o se nenhum modificador for especifico.

                ? 2. PRIVATE (-)
                    -> Acess√≠vel apenas dentro da pr√≥pria classe.
                    -> Ideal para proteger atributos ou m√©todos que n√£o deve ser acessados fora.

                ? 3. PROTECTED (#)
                    -> Acess√≠vel dentro da classe e me classes filhas (heran√ßa).
                    -> N√£o pode ser acessado diretamente por inst√¢nciar externas.

                    ! üß† Dicas importantes:
                        1. Use private para proteger dados sens√≠veis.
                        2. Use protected quando quiser que subclasses tenham acesso, mas n√£o o mundo externo.
                        3. Use public para m√©todos e atributos que precisam ser expostos.

            * M√©todos de acesso.

                ? 1. GETTER(Acessador)
                    -> Permite ler o valor de um atributo como se fosse uma propriedade, mas com l√≥gica embutida se necess√°rio.
                    -> Sintaxe: get nomeDoMetodo()

                    * Caracter√≠sticas:
                        1. Retornam o tipo do atributo que ser√° provido o acesso;
                        2. N√£o recebe par√¢mentros
                        3. Seu nome √© composto pelo prefixo "get" seguido do nome atribuido que acesso ser√° provido.

                ? 2. SETTER(Modificador).
                    -> Permite alterar o valor de uma atributo, mas com regras de valida√ß√£o ou l√≥gica. 
                    -> Sintaxe: set nomeDoMetodo(valor: tipo).

                    * Caracter√≠sticas 
                        1. N√£o possuem retorno.
                        2. Recebe por par√¢mentros o valor a ser inserido no atributo.
                        3. Seu nome √© composto pelo prefixo "set" seguido do nome do atributo que iremos possibilitar a modifica√ß√£o.

                    ! üí°Regras e Boas Pr√°ticas
                        1. Usar get e set mant√©m o princ√≠pio do encapsulamento.
                        2. Nomeie a propriedade privada com um prefixo como _ para evitar conflito com o nome do getter/setter.
                        3. Eles s√£o usados como propriedades, n√£o como fun√ß√µes.

        ? Heran√ßa 
            -> Heran√ßa √© um dos pilares da POO. Ela permite que uma classe (filha) herde caracter√≠sticas (atributos e m√©todos) de outra classe (pai). Isso evita repeti√ß√£o de c√≥digo e promove reutiliza√ß√£o e organiza√ß√£o.



        * Obs: 
            1. Toda vez que pensar em ler dados da classe - use par√¢mentros.
            2. Toda vez que pensar em imprimir dados da classe - use return.
*/